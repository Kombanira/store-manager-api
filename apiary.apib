FORMAT: 1A
HOST: https://my-store-manager2.herokuapp.com/
# MyStoreManager

Store-manager is an api that helps store owners manage sales and product inventory records.

## Register [/ap1/v1/register/]
### Register a new store attendant [POST]

+ Request (application/json)

    + Body

      
            {
                "username": "testme",
                "email": "test@gmail.com",
                "password": "12345678"

            }


+ Response 201 (application/json)

        [
            {
                "message": "User was created succesfully",
                "status": "ok",
                "user": username
            }
        ]

## Login [/ap1/v1/login/]
### Login admin [POST]
+ Request (application/json)

    + Body

      
            {
                "email": "test@gmail.com",
                "password": "12345678"

            }
 
+ Response 200 (application/json)

        [
            {
                "message": "User was logged in succesfully",
                "status": "ok",
                "access_token": access_token,
            
            }
        ]

## Products Collection [/ap1/v1/products/]

### List All Products [GET]

A logged in user can fetch all available products.
+ Request (application/json)

   + Headers
             Authorization: Bearer access_token

+ Response 200 (application/json)

        [
            {
                "message": "products retrieved succesfully",
                "status":"ok",
                "products": products
            }
        ]

### Create a New Product [POST]

An admin can create a new product using this action. It takes a JSON
object containing product details including product name,quantity and price.

+ Request (application/json)

    + Headers

            Authorization: Bearer access_token
            
    + Body

            {
                "name": "monalisa painting",
                "quantity": 10,
                "price": 3000000000
                "min_stock":5

            }



+ Response 201 (application/json)

        [
            {
                "message": "product created successfully",
                "product": products,
                "status":"ok"
            }
        ]
            
## Each Products Collection [/ap1/v1/product/<product_id>/]
### Get a single Products [GET]
A logged in user can fetch a single product using this action.
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
 
    + Body

            {
                "name": "monalisa",
                "quantity": 10,
                "price": 3000000000
                "min_stock":5

            }
            
+ Response 200 (application/json)

        [
            {
                "message": "product retrieved succesfully",
                "status":"ok",
                "products": products
            }
        ]
        
## Edit Products Collection [/ap1/v1/products/<product_id>/]
### Edit a Products [GET]
A logged in admin can edit a product using this action.
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
    + Body

            {
                "name": "monalisapainting",
                "quantity": 10,
                "price": 3000000000
                "min_stock":5

            }
            
+ Response 200 (application/json)

        [
            {
                "message": "Product  was successfuly edited",
                "product": product
            }
        ]
## Delete  Product Collection [/ap1/v1/products/<product_id>/]
### Delete a Product [GET]
A logged in admin can delete a product using this action.
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
+ Response 200 (application/json)

        [
            {
                "message": "Product  was successfuly deleted"
            }
        ]           
## Sales Collection [/ap1/v1/sales/]

### List All Sales [GET]
An admin  can fetch all  sales using this action.  
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
+ Response 200 (application/json)

        [
            {
                "message": "sales retrieved succesfully",
                "status":"ok",
                "sale":result
            }
        ]

### Create a New Sale [POST]

A store attendant can create a new sale using this action. It takes a JSON object containing sale details including description of sale and items
.

+ Request (application/json)
    + Headers

            Authorization: Bearer access_token

    + Body

            {
                "product_id":1,
                "quantity": 2
               

            }
  
+ Response 201 (application/json)

        [
            {
                "message": "sale created successfully",
                "status":"ok"
            }
        ]

## Each Sale Collection [/ap1/v1/sale/<sale_id>/]

### Get a single Sale [GET]
An admin can fetch a specific sale using this action. 
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
+ Response 200 (application/json)

        [
            {
                "message": "sale retrieved succesfully",
                "status":"ok",
                "sales": sales
            }
        ]
        
### Get my Sales [GET]
A store attendant  can fetch his/her sales using this action. 
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
+ Response 200 (application/json)

        [
            {
                "message": "my sales retrieved succesfully",
                "status":"ok",
                "sales": sales
            }
        ]
        
 
## Category Collection [/api/v1/categories/]

### List All Categories [GET]

A logged in user can fetch all available categories.
+ Request (application/json)

   + Headers
             Authorization: Bearer access_token

+ Response 200 (application/json)

        [
            {
                "message": "categories retrieved succesfully",
                "status":"ok",
                "categories": categories
            }
        ]

### Create a New Category [POST]

An admin can create a new product using this action. It takes a JSON
object containing category details including category name.

+ Request (application/json)

    + Headers

            Authorization: Bearer access_token
            
    + Body

            {
                "name": "Paintings"


            }



+ Response 201 (application/json)

        [
            {
                "message": "category created successfully",
                "categories": categories,
                "status":"ok"
            }
        ]
        
## Edit Category Collection [/ap1/v1/categories/<category_id>/]
### Edit a Products [GET]
A logged in admin can edit a category using this action.
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
    + Body

            {
                "name": "artwork"

            }
            
+ Response 200 (application/json)

        [
            {
                "message": "Category  was successfuly edited",
                "category": category
            }
        ]
        
## Delete  Category Collection [/ap1/v1/categories/<category_id>/]
### Delete a Product [GET]
A logged in admin can delete a category using this action.
+ Request (application/json)

   + Headers
            Authorization: Bearer access_token
            
+ Response 200 (application/json)

        [
            {
                "message": "category  was successfuly deleted",
                "status": "ok"
            }
        ] 
        
## Make Admin Collection [/api/v1/make/admin/<int:attendant_id>/]
### Make store attendant admin [POST]

A logged in admin can make a store attendant admin using this action.

+ Request (application/json)

    + Headers

            Authorization: Bearer access_token
            


+ Response 200 (application/json)

        [
            {
                "message": "attendant successfuly made admin",
                "status":"ok"
            }
        ]